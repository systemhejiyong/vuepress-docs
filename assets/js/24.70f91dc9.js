(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{185:function(e,t,s){"use strict";s.r(t);var n=s(0),r=Object(n.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[e._m(0),e._v(" "),s("p",[e._v("官网介绍")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.2"),s("OutboundLink")],1)]),e._v(" "),e._m(1),e._v(" "),s("ul",[s("li",[e._v("开源地址"),s("a",{attrs:{href:"https://github.com/khellang/Scrutor",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/khellang/Scrutor"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("参考文档 "),s("a",{attrs:{href:"https://www.cnblogs.com/catcher1994/p/10316928.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.cnblogs.com/catcher1994/p/10316928.html"),s("OutboundLink")],1),e._v("\n手动管理依赖注入过于麻烦,当有多个仓储，服务，无法统一注入，Scrutor能帮助我们简化ASP.NET Core的DI注册。")])]),e._v(" "),s("p",[e._v("在ConfigServices中，我们原本需要这样子依次注入仓储，服务和其他接口及实现，当有多个仓储时，这样就过于繁琐。")]),e._v(" "),e._m(2),e._m(3),e._v(" "),s("p",[e._v("当我们有多个Service后缀的服务时，使用以下方法，可将服务扫描只留下以Serivce结尾的类，将其类型注册为提供所有公共接口生成服务，其生命周期为Transient，")]),e._v(" "),e._m(4),e._m(5),e._v(" "),s("p",[e._v("新建一个空接口，当其他类继承此接口后，统一注入到DI中，以Transient的生命周期。")]),e._v(" "),e._m(6),e._m(7),e._v(" "),e._m(8),e._m(9),e._v(" "),e._m(10),s("p",[e._v("扫描所有继承ITransientDependency的实现。")]),e._v(" "),e._m(11),e._m(12),e._v(" "),s("p",[e._v("在其他类中使用此接口")]),e._v(" "),e._m(13),e._m(14),e._v(" "),s("p",[e._v("当然，我们可以统一注入，而非写二次servics.Scan")]),e._v(" "),e._m(15),s("RightMenu")],1)},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"依赖注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入","aria-hidden":"true"}},[this._v("#")]),this._v(" 依赖注入")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"scrutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scrutor","aria-hidden":"true"}},[this._v("#")]),this._v(" Scrutor")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("services.AddTransient<IUserRepository, UserRepository>();\nservices.AddTransient<IUserService, UserService>();\nservices.AddTransient<ICurrentUser, CurrentUser>();\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"serivce后缀服务注入di"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serivce后缀服务注入di","aria-hidden":"true"}},[this._v("#")]),this._v(" Serivce后缀服务注入DI")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('services.Scan(scan => scan\n        //加载Startup这个类所在的程序集\n        .FromAssemblyOf<Startup>()\n        // 表示要注册那些类，上面的代码还做了过滤，只留下了以 Service 结尾的类\n        .AddClasses(classes => classes.Where(t => t.Name.EndsWith("Service", StringComparison.OrdinalIgnoreCase)))\n        //表示将类型注册为提供其所有公共接口作为服务\n        .AsImplementedInterfaces()\n        //表示注册的生命周期为 Transient\n        .WithTransientLifetime()\n         );\n\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"itransientdependency"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#itransientdependency","aria-hidden":"true"}},[this._v("#")]),this._v(" ITransientDependency")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("namespace LinCms.Zero.Dependency\n{\n    public interface ITransientDependency\n    {\n    }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口","aria-hidden":"true"}},[this._v("#")]),this._v(" 接口")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("public interface ICurrentUser\n{\n    int? Id { get; }\n\n    int? GroupId { get; }\n\n    bool? IsAdmin { get; }\n}\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"模拟实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模拟实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 模拟实现")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("    public class CurrentUser : ICurrentUser, ITransientDependency\n    {\n     \n        public int? Id => 1;\n        public int? GroupId => 2;\n        public bool? IsAdmin => true;\n    }\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("   services.Scan(scan => scan\n       // We start out with all types in the assembly of ITransientService\n        .FromAssemblyOf<ITransientDependency>()\n        // AddClasses starts out with all public, non-abstract types in this assembly.\n        // These types are then filtered by the delegate passed to the method.\n        // In this case, we filter out only the classes that are assignable to ITransientService.\n        .AddClasses(classes => classes.AssignableTo<ITransientDependency>())\n        // We then specify what type we want to register these classes as.\n        // In this case, we want to register the types as all of its implemented interfaces.\n        // So if a type implements 3 interfaces; A, B, C, we'd end up with three separate registrations.\n        .AsImplementedInterfaces()\n        // And lastly, we specify the lifetime of these registrations.\n        .WithTransientLifetime()\n         );\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"如何使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何使用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('[ApiController]\n[Route("cms/user")]\npublic class UserController : ControllerBase\n{\n    private readonly ICurrentUser _currentUser;\n\n    public UserController(ICurrentUser currentUser)\n    {\n        _currentUser = currentUser;\n    }\n\n    [HttpGet]\n    public int GetUser()\n    {\n        return _currentUser.Id;\n    }\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"统一注入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#统一注入","aria-hidden":"true"}},[this._v("#")]),this._v(" 统一注入")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('services.Scan(scan => scan\n            .FromAssemblyOf<Startup>()\n            .AddClasses(classes => classes.Where(t => t.Name.EndsWith("Service",StringComparison.OrdinalIgnoreCase)))\n            .AsImplementedInterfaces()\n            .WithTransientLifetime()\n            .FromAssemblyOf<ITransientDependency>()\n            .AddClasses(classes => classes.AssignableTo<ITransientDependency>())\n            .AsImplementedInterfaces()\n            .WithTransientLifetime()\n      );\n')])])])}],!1,null,null,null);t.default=r.exports}}]);