(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{183:function(t,e,r){"use strict";r.r(e);var i=r(0),n=Object(i.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("有个需求，就是在. NET Core中，我们想在项目 启动时，获取LinCmsAuthorizeAttribute这个特性标签所有出现的地方，把他的参数，放入一个集合并缓存起来，以便后面使用此数据用于权限验证。")]),t._v(" "),r("p",[t._v("我们通过反射获取所有控制器下及方法的Attribute。")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/RainingNight/p/dynamic-authorization-in-asp-net-core.html"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("当然，这个只是部分代码，完整代码请查看最下方开源地址，其中LinCmsAuthorizeAttribute继承AuthorizeAttribute，拥有指定角色权限控制，当Permission未指定时，当过滤器与Authorize功能相同。Module是指模块，即多个权限，属于同一个模块，方便前台展示为树型结构。Permission属性的值不可重复。")]),t._v(" "),t._m(4),t._m(5),t._v(" "),r("p",[t._v("在 LinCms.Web中的Controller，至于为什么Permission为中文，目前的主要原因，此项目用于适配 "),r("a",{attrs:{href:"https://github.com/TaleLin/lin-cms-vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lin-CMS-VUE"),r("OutboundLink")],1),t._v("项目,所以于平常我们以某个字符串作为权限名不同，但不须大惊小怪，道理相同。")]),t._v(" "),t._m(6),t._m(7),t._v(" "),r("p",[t._v("in xunit test 项目工程中，开始我们的测试")]),t._v(" "),t._m(8),t._m(9),t._v(" "),r("p",[t._v("可在输出文本中查看，正是我们想要的东西，最后一行，是其他Controller中的内容，而且我们重写了ToString(),所以我们能看到其属性。")]),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),r("p",[t._v("只有AdminController加了此标签，所以只有一行。")]),t._v(" "),t._m(14),r("p",[t._v('此时Roles为Administrator，Permission及Module都是null，\n这是因为只有AdminController中加了LinGroup.Administrator="Administrator"字符串，在登录过程中，已经给当前登录用户设置了 new Claim(ClaimTypes.Role,user.IsAdmin()?LinGroup.Administrator:user.GroupId.ToString())，即"Administrator,当用户访问AdminController中的方法时，LinCmsAuthorize并没有做相关验证，都是AuthorizeAttribute，实现了固定角色权限的判断及登录的判断。LinCmsAuthorize完成了固定权限设置为不同的动态角色后，判断用户是否拥有此权限。')]),t._v(" "),t._m(15),t._m(16),t._v(" "),r("ul",[r("li",[t._v("c# – 如何在asp. net core rc2中获取控制器的自定义属性 "),r("a",{attrs:{href:"https://codeday.me/bug/20181207/453278.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://codeday.me/bug/20181207/453278.html"),r("OutboundLink")],1)]),t._v(" "),r("li")]),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),r("RightMenu")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"获取控制器及方法特性标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取控制器及方法特性标签","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取控制器及方法特性标签")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v(".NET Core 反射获取所有控制器及方法上特定标签.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"lincmsauthorizeattribute是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lincmsauthorizeattribute是什么","aria-hidden":"true"}},[this._v("#")]),this._v(" LinCmsAuthorizeAttribute是什么")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("其代码非常简单，用于自定义权限验证，通过重写OnAuthorizationAsync方法，实现固定权限可分配给动态角色（也能分配给动态用户）。主要就"),e("strong",[this._v("基于权限的授权")]),this._v("的实现进行研究，实现方法级别的权限验证。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]\npublic class LinCmsAuthorizeAttribute : AuthorizeAttribute, IAsyncAuthorizationFilter\n{\n    public string Permission { get; set; }\n    public string Module { get; set; }\n\n    public LinCmsAuthorizeAttribute()\n    {\n\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public LinCmsAuthorizeAttribute(string permission,string module, string policy) : base(policy)\n    {\n        Permission = permission;\n        Module = module;\n    }\n\n    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)\n    {\n        if (Permission == null) return;\n        var authorizationService = (IAuthorizationService)context.HttpContext.RequestServices.GetService(typeof(IAuthorizationService));\n        var authorizationResult = await authorizationService.AuthorizeAsync(context.HttpContext.User, null, new OperationAuthorizationRequirement() { Name = Permission });\n        if (!authorizationResult.Succeeded)\n        {\n            context.Result = new ForbidResult();\n        }\n    }\n\n    public override string ToString()\n    {\n        return $"\\"{base.ToString()}\\",\\"Permission:{Permission}\\",\\"Module:{Module}\\",\\"Roles:{Roles}\\",\\"Policy:{Policy}\\",\\"AuthenticationSchemes:{AuthenticationSchemes}\\"";\n    }\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"controller"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controller","aria-hidden":"true"}},[this._v("#")]),this._v(" Controller")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[Route("cms/log")]\n[ApiController]\npublic class LogController : ControllerBase\n{\n    private readonly ILogService _logService;\n\n    public LogController(ILogService logService)\n    {\n        _logService = logService;\n    }\n\n    [HttpGet("users")]\n    [LinCmsAuthorize("查询日志记录的用户", "日志")]\n    public List<string> GetLoggedUsers([FromQuery]PageDto pageDto)\n    {\n        return _logService.GetLoggedUsers(pageDto);\n    }\n\n \n    [HttpGet]\n    [LinCmsAuthorize("查询所有日志", "日志")]\n    public PagedResultDto<LinLog> GetLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n\n    [HttpGet("search")]\n    [LinCmsAuthorize("搜索日志", "日志")]\n    public PagedResultDto<LinLog> SearchLogs([FromQuery]LogSearchDto searchDto)\n    {\n        return _logService.GetLogUsers(searchDto);\n    }\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"测试类获取方法上的特定标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试类获取方法上的特定标签","aria-hidden":"true"}},[this._v("#")]),this._v(" 测试类获取方法上的特定标签")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[Fact]\npublic void GetAssemblyMethodsAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(r =>\n    {\n        foreach (var methodInfo in r.GetMethods())\n        {\n            foreach (Attribute attribute in methodInfo.GetCustomAttributes())\n            {\n                if (attribute is LinCmsAuthorizeAttribute linCmsAuthorize)\n                {\n                    _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n                }\n            }\n        }\n    });\n}    \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"方法结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法结果","aria-hidden":"true"}},[this._v("#")]),this._v(" 方法结果")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:查询日志记录的用户","Module:日志","Roles:","Policy:","AuthenticationSchemes:"\n"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:查询所有日志","Module:日志","Roles:","Policy:","AuthenticationSchemes:"\n"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:搜索日志","Module:日志","Roles:","Policy:","AuthenticationSchemes:"\n"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:查看lin的信息","Module:信息","Roles:","Policy:","AuthenticationSchemes:"\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"获取控制器上特性标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取控制器上特性标签","aria-hidden":"true"}},[this._v("#")]),this._v(" 获取控制器上特性标签")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('/// <summary>\n/// 获取控制器上的LinCmsAuthorizeAttribute\n/// </summary>\n/// "LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:","Module:","Roles:Administrator","Policy:","AuthenticationSchemes:"\n[Fact]\npublic void GetControllerAttributes()\n{\n    var assembly = typeof(Startup).Assembly.GetTypes().AsEnumerable()\n        .Where(type => typeof(ControllerBase).IsAssignableFrom(type)).ToList();\n\n    assembly.ForEach(d =>\n    {\n        var linCmsAuthorize = d.GetCustomAttribute<LinCmsAuthorizeAttribute>();\n        if (linCmsAuthorize != null)\n        {\n            _testOutputHelper.WriteLine(linCmsAuthorize.ToString());\n        }\n    });\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"controller结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controller结果","aria-hidden":"true"}},[this._v("#")]),this._v(" Controller结果")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('"LinCms.Zero.Authorization.LinCmsAuthorizeAttribute","Permission:","Module:","Roles:Administrator","Policy:","AuthenticationSchemes:"\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[LinCmsAuthorize(Roles = LinGroup.Administrator)]\npublic class AdminController : ControllerBase\n{\n    ...\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"开源地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开源地址","aria-hidden":"true"}},[this._v("#")]),this._v(" 开源地址")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("a",{attrs:{href:"github.com/luoyunchong/lin-cms-dotnetcore"}},[this._v("github.com/luoyunchong/lin-cms-dotnetcore")])])])}],!1,null,null,null);e.default=n.exports}}]);