(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{187:function(t,e,n){"use strict";n.r(e);var s=n(0),a=Object(s.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("本文使用ASP .NET Core的WEB API，构建一个RESTful风格的接口，使用Freesql访问MySQL数据库，实现二个表的简单博客，并集成AutoMapper。")]),t._v(" "),n("p",[t._v("接上一篇")]),t._v(" "),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"http://blog.igeekfan.cn/2019/06/30/re-start/FreeSql-asp.net-core-how-to-use/",target:"_blank",rel:"noopener noreferrer"}},[t._v("FreeSql在ASP.NTE Core WebApi中如何使用的教程"),n("OutboundLink")],1)])]),t._v(" "),n("li",[n("p",[t._v("项目源码 "),n("a",{attrs:{href:"https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/luoyunchong/dotnetcore-examples/tree/master/asp.net-core-freesql"),n("OutboundLink")],1)])])]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v("当我们使用RESTful提供接口时，比如创建一个博客，修改一下博客内容时，他们的参数是有区别的。良好的设计应该是")]),t._v(" "),n("p",[t._v("创建一个博客")]),t._v(" "),t._m(3),n("p",[t._v("修改一个博客内容")]),t._v(" "),t._m(4),n("p",[t._v("但一个blog 实体如下")]),t._v(" "),t._m(5),n("p",[t._v("如果我们以Blog作为controllers中的参数时")]),t._v(" "),t._m(6),n("p",[t._v("这时修改swagger显示的默认参数是")]),t._v(" "),t._m(7),n("p",[t._v("如果我们不传递createTime，会出现异常，应该createTime是DateTime，不能为null，只有DateTime?才能为null,有?为可空类型。")]),t._v(" "),n("p",[t._v("所以我们应该为POST方式传递过来时，新建一个实体类，我们称之为DTO(Data Transfer Object)，即数据传输对象，因为createTime即使传递，后端为他赋了值，前台传了也无效。有了DTO，这样可让前端清楚他们应该传递的参数，而不会出现没有作用的参数。")]),t._v(" "),n("p",[t._v("在根目录创建Models/Blogs文件夹，在Blogs文件夹中创建")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),t._m(11),n("p",[t._v("有了Dto后，我们会发现了新的问题，往数据库插入时，往往使用了一些ORM,他们只支持原本的实体类，如Blog，Post。但不支持CreateBlogDto、UpdateBlogDto,我们可以手动，将一个类的值，赋值给另一个类。\n如")]),t._v(" "),t._m(12),n("p",[t._v("现在只是非常简单的二个属性，我们还能忍受，但如果是十个属性、而且有着大量的类与类之间的转换呢。这时修改AutoMapper就闪亮登场了。")]),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),n("p",[t._v("我们是在ASP .NET Core下使用AutoMapper "),n("a",{attrs:{href:"https://automapper.readthedocs.io/en/latest/Dependency-injection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网介绍，如何依赖注入中使用"),n("OutboundLink")],1)]),t._v(" "),t._m(15),t._v(" "),n("p",[t._v("先cd到dotnetcore-examples\\asp.net-core-freesql\\RESTful.FreeSql目录")]),t._v(" "),t._m(16),n("p",[t._v("在StartUp.cs中的ConfigureServices配置如下")]),t._v(" "),t._m(17),t._m(18),t._v(" "),n("p",[t._v("AutoMapper/BlogProfile.cs")]),t._v(" "),t._m(19),n("p",[t._v("AutoMapper/BlogProfile.cs")]),t._v(" "),t._m(20),n("p",[t._v("Models/Posts/SearchPostDto.cs根据博客id，得到分页的评论时，集成分页类")]),t._v(" "),t._m(21),n("p",[t._v("Controlers/BlogController.cs文件中，注入IMapper,")]),t._v(" "),t._m(22),n("p",[t._v("Controlers/BlogController.cs文件中，注入IMapper,")]),t._v(" "),t._m(23),t._m(24),t._v(" "),n("ul",[n("li",[t._v("建议大家先看官网 "),n("a",{attrs:{href:"http://automapper.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://automapper.org/"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("开源地址 "),n("a",{attrs:{href:"https://github.com/AutoMapper/AutoMapper",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/AutoMapper/AutoMapper"),n("OutboundLink")],1)]),t._v(" "),n("li",[t._v("Getting-started 文档 "),n("a",{attrs:{href:"https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://automapper.readthedocs.io/en/latest/Getting-started.html#what-is-automapper"),n("OutboundLink")],1)])]),t._v(" "),n("RightMenu")],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"restful-freesql-automapper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#restful-freesql-automapper","aria-hidden":"true"}},[this._v("#")]),this._v(" RESTful+FreeSql+AutoMapper")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"文章概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文章概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 文章概述")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"dto作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dto作用","aria-hidden":"true"}},[this._v("#")]),this._v(" Dto作用")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("POST /api/blog\ndata"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[t._v("PUT /api/blog\ndata"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"blogId"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"int"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("    public class Blog\n    {\n        [Column(IsIdentity = true, IsPrimary = true)]\n        public int BlogId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public DateTime CreateTime { get; set; }\n        public virtual List<Post> Posts { get; set; }\n    }\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("       // POST api/blog\n        [HttpPost]\n        public void Post([FromBody] Blog blog)\n        {\n            blog.CreateTime=DateTime.Now;\n            _fsql.Insert<Blog>(blog).ExecuteAffrows();\n        }\n")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-json extra-class"},[n("pre",{pre:!0,attrs:{class:"language-json"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"blogId"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"title"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"content"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"createTime"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2019-06-30T07:33:05.524Z"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"posts"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"postId"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"replyContent"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"blogId"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token property"}},[t._v('"replyTime"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2019-06-30T07:33:05.524Z"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"createblogdto-cs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#createblogdto-cs","aria-hidden":"true"}},[this._v("#")]),this._v(" CreateBlogDto.cs")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("namespace RESTful.FreeSql.Models.Blogs\n{\n    public class CreateBlogDto\n    {\n        public string Title { get; set; }\n        public string Content { get; set; }\n\n    }\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"updateblogdto-cs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#updateblogdto-cs","aria-hidden":"true"}},[this._v("#")]),this._v(" UpdateBlogDto.cs")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("namespace RESTful.FreeSql.Models.Blogs\n{\n    public class UpdateBlogDto\n    {\n        public int BlogId { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n    }\n}\n\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('    CreateBlogDto createBlogDto = new CreateBlogDto()\n    {\n        Title = "我是title",\n        Content = "我是content"\n    };\n\n    Blog newBlog=new Blog()\n    {\n        Title = createBlogDto.Title,\n        Content = createBlogDto.Content\n    };\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"automapper"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#automapper","aria-hidden":"true"}},[this._v("#")]),this._v(" AutoMapper")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("作用：A convention-based object-object mapper.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"setup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setup","aria-hidden":"true"}},[this._v("#")]),this._v(" Setup")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"language-PowerShell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-powershell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" > dotnet add package AutoMapper\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("PS")]),t._v(" > dotnet add package AutoMapper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Extensions"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Microsoft"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DependencyInjection "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("version 6"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("1\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("   public void ConfigureServices(IServiceCollection services)\n    {\n        // .... Ignore code before this\n        \n        //AddAutoMapper会去找继承Profile的类，\n        services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n\n        // .... Ignore code after this\n    }\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"adding-profiles"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-profiles","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding Profiles")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("using AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\n\nnamespace RESTful.FreeSql.AutoMapper\n{\n    public class BlogProfile : Profile\n    {\n        public BlogProfile() \n        {\n            CreateMap<CreateBlogDto, Blog>();\n            CreateMap<UpdateBlogDto, Blog>();\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("using AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\n\nnamespace RESTful.FreeSql.AutoMapper\n{\n    public class PostProfile : Profile\n    {\n        public PostProfile()\n        {\n            CreateMap<CreatePostDto,Post>();\n        }\n    }\n}\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("using RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Models.Posts\n{\n    public class SearchPostDto:PageDto\n    {\n        public int BlogId { get; set; }\n    }\n}\n\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('using AutoMapper;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Blogs;\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route("api/[controller]")]\n    [ApiController]\n    public class BlogController : ControllerBase\n    {\n        // GET api/Blog\n\n        private readonly IFreeSql _fsql;\n        private readonly IMapper _mapper;\n        public BlogController(IFreeSql fsql, IMapper mapper)\n        {\n            _fsql = fsql;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// 博客列表页 \n        /// </summary>\n        /// <param name="pageDto">分页参数</param>\n        /// <returns></returns>\n        [HttpGet]\n        public ActionResult<PagedResultDto<Blog>> Get([FromQuery]PageDto pageDto)\n        {\n            List<Blog> blogs = _fsql.Select<Blog>().OrderByDescending(r => r.CreateTime).Page(pageDto.PageNumber, pageDto.PageSize).ToList();\n            long count = _fsql.Select<Blog>().Count();\n            return new PagedResultDto<Blog>(count, blogs);\n        }\n\n        // GET api/blog/5\n        [HttpGet("{id}")]\n        public ActionResult<Blog> Get(int id)\n        {\n            // eg.1 return _fsql.Select<Blog>().Where(a => a.Id == id).ToOne();\n            // eg.2\n            return _fsql.Select<Blog>(id).ToOne();\n        }\n\n        // POST api/blog\n        [HttpPost]\n        public void Post([FromBody] CreateBlogDto createBlogDto)\n        {\n            Blog blog = _mapper.Map<Blog>(createBlogDto);\n            blog.CreateTime = DateTime.Now;\n            _fsql.Insert<Blog>(blog).ExecuteAffrows();\n        }\n\n        // PUT api/blog\n        [HttpPut]\n        public void Put([FromBody] UpdateBlogDto updateBlogDto)\n        {\n\n            //eg.1 更新指定列\n            //_fsql.Update<Blog>(updateBlogDto.BlogId).Set(a => new Blog()\n            //{\n            //    Title = updateBlogDto.Title,\n            //    Content = updateBlogDto.Content\n            //}).ExecuteAffrows();\n\n            //eg.2将这个实体更新到数据库中。当更新时，会把其他列的值，如CreateTime也更新掉。\n            //使用IgnoreColumns可忽略某一些列。\n\n            Blog blog = _mapper.Map<Blog>(updateBlogDto);\n            _fsql.Update<Blog>().SetSource(blog).IgnoreColumns(r => r.CreateTime).ExecuteAffrows();\n        }\n\n        // DELETE api/blog/5\n        [HttpDelete("{id}")]\n        public void Delete(int id)\n        {\n            _fsql.Delete<Blog>(new { BlogId = id }).ExecuteAffrows();\n        }\n    }\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c# extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('using FreeSql;\nusing Microsoft.AspNetCore.Mvc;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing AutoMapper;\nusing RESTful.FreeSql.Domain;\nusing RESTful.FreeSql.Models.Posts;\nusing RESTful.FreeSql.Web;\n\nnamespace RESTful.FreeSql.Controllers\n{\n    [Route("api/[controller]")]\n    [ApiController]\n    public class PostController : ControllerBase\n    {\n        // GET: api/Post\n        private readonly IFreeSql _fsql;\n        private readonly IMapper _mapper;\n        public PostController(IFreeSql fsql, IMapper mapper)\n        {\n            _fsql = fsql;\n            _mapper = mapper;\n        }\n\n        /// <summary>\n        /// 根据博客id、分页条件查询评论信息\n        /// </summary>\n        /// <param name="searchPostDto"></param>\n        /// <returns></returns>\n        [HttpGet]\n        public PagedResultDto<Post> Get(SearchPostDto searchPostDto)\n        {\n            ISelect<Post> selectPost = _fsql\n                .Select<Post>()\n                .Where(r => r.BlogId == searchPostDto.BlogId);\n\n            List<Post> posts = selectPost.OrderByDescending(r => r.ReplyTime)\n                .Page(searchPostDto.PageNumber, searchPostDto.PageSize)\n                .ToList();\n\n            long total = selectPost.Count();\n\n            return new PagedResultDto<Post>(total, posts);\n        }\n\n        // GET: api/Post/5\n        [HttpGet("{id}", Name = "Get")]\n        public Post Get(int id)\n        {\n            return _fsql.Select<Post>().Where(a => a.PostId == id).ToOne();\n        }\n\n        // POST: api/Post\n        [HttpPost]\n        public void Post([FromBody] CreatePostDto createPostDto)\n        {\n            Post post = _mapper.Map<Post>(createPostDto);\n            post.ReplyTime = DateTime.Now;\n            _fsql.Insert(post).ExecuteAffrows();\n        }\n\n\n        // DELETE: api/Post/\n        [HttpDelete("{id}")]\n        public async Task DeleteAsync(int id)\n        {\n            await _fsql.Delete<Post>(new Post { PostId = id }).ExecuteAffrowsAsync();\n        }\n    }\n}\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考")])}],!1,null,null,null);e.default=a.exports}}]);